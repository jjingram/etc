set nocompatible

call plug#begin('~/.vim/plug')
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-vinegar'
Plug 'scrooloose/syntastic'
Plug 'haya14busa/incsearch.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
Plug 'alx741/vim-hindent', {'for': 'haskell'}
Plug 'klen/python-mode', {'for': 'python'}
Plug 'fatih/vim-go', {'for': 'go'}
Plug 'def-lkb/ocp-indent-vim', {'for': 'ocaml'}
Plug 'kovisoft/paredit', {'for': 'scheme'}
Plug 'kovisoft/slimv', {'for': 'lisp'}
Plug 'rust-lang/rust.vim', {'for': 'rust'}
call plug#end()

set textwidth=79
set clipboard=unnamed
set nocursorline
set nojoinspaces
set hidden
set ignorecase hlsearch smartcase
set shortmess+=aoOstTI
set expandtab tabstop=2
set mouse=a mousehide
if &term =~ '^screen'
    set ttymouse=xterm2
endif
set noerrorbells visualbell t_vb=
set completeopt=menu
set winminheight=0
set splitright
set backup
if has('persistent_undo')
    set undofile undolevels=1000 undoreload=10000
endif

colorscheme jji
set background=light
set guifont=Anonymous\ Pro:h24
set guioptions=
set noerrorbells visualbell t_vb=
set guicursor+=a:blinkon0
set columns=80
set colorcolumn=0
set laststatus=2
set statusline=%F
if has('gui_macvim')
        set fullscreen
endif

nnoremap ! :!
map zl zL
map zh zH
map Q gq
map j gj
map k gk
map Y y$
vmap < <gv
vmap > >gv

autocmd GUIEnter * set visualbell t_vb=
autocmd BufRead,BufNewFile *.sch setlocal ft=scheme
autocmd BufWritePre <buffer> call StripTrailingWhitespace()
autocmd BufRead,BufNewFile *.md setlocal ft=markdown linebreak
autocmd BufWinEnter quickfix setlocal linebreak
autocmd FileType haskell setlocal ts=8 et sts=2 sw=2 sr
autocmd FileType c,cpp,make setlocal ts=8 noet
autocmd FileType c,cpp setlocal cin fo=tcroqnl cino=:0,l1,t0,g0,(s,m1,j1,J1

set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n <Plug>(incsearch-nohl-n)
map N <Plug>(incsearch-nohl-N)
map * <Plug>(incsearch-nohl-*)
map # <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

let g:ctrlp_cmd = 'CtrlPBuffer'

let g:hindent_on_save = 1
let g:hindent_indent_size = 2
let g:hindent_line_length = 79

let g:vim_markdown_folding_disabled = 1

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

function! DistractionFree()
        set lines=40 columns=80
        set fullscreen
endfunction

function! StripTrailingWhitespace()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Let's do this!
    %s/\s\+$//e
    " Cleanup: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" Setup directories for backup, view and swap files under ~/.vim/.
function! InitializeDirectories()
    let parent = $HOME
    let prefix = 'vim/'
    let dir_list = {
    \   'backup': 'backupdir',
    \   'views': 'viewdir',
    \   'swap': 'directory',
    \}
    if has('persistent_undo')
        let dir_list['undo'] = 'undodir'
    endif
    let common_dir = parent . '/.' . prefix
    for [dirname, settingname] in items(dir_list)
        let directory = common_dir . dirname . '/'
        if exists("*mkdir")
            if !isdirectory(directory)
                call mkdir(directory)
            endif
        endif
        if !isdirectory(directory)
            echo "Warning: Unable to create backup directory: " . directory
            echo "Try: mkdir -p " . directory
        else
            let directory = substitute(directory, " ", "\\\\ ", "g")
            exec "set " . settingname . "=" . directory
        endif
    endfor
endfunction
call InitializeDirectories()

function! HiGroup()
    echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
    \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
    \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"
endfunction

function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END
