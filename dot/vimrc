set nocompatible

syntax enable

filetype on
filetype off
set rtp+=~/.vim/bundle/vundle
call vundle#rc()

Bundle 'gmarik/vundle'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-abolish'
Bundle 'kana/vim-textobj-user'
Bundle 'kana/vim-textobj-indent'
Bundle 'scrooloose/syntastic'
Bundle 'altercation/vim-colors-solarized'
Bundle 'hynek/vim-python-pep8-indent'
Bundle 'vivien/vim-addon-linux-coding-style'
Bundle 'christoomey/vim-tmux-navigator'

filetype plugin indent on
syntax on
color solarized

set autoindent
set autoread
set backspace=indent,eol,start
set backup
set clipboard=unnamed
set ruler
set showcmd
set completeopt=menu,longest
set encoding=utf-8
set expandtab
set ignorecase
set incsearch
set hidden
set history=1000
set hlsearch
set scrolloff=3
set scrolljump=1
set shortmess+=filmnrxoOtT
set showcmd
set smartcase
set shiftwidth=2
set softtabstop=2
set tabstop=8
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set wildmenu
set wildmode=list:longest,full
set whichwrap=b,s,h,l,<,>,[,]
set mouse=a
set mousehide
set splitright splitbelow
set noerrorbells visualbell t_vb=
set iskeyword-=.
set iskeyword-=#
set iskeyword-=-
set winminheight=0
if has('persistent_undo')
  set undofile
  set undolevels=1000
  set undoreload=10000
endif

map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
map <s-h> gT
map <s-l> gt
noremap j gj
noremap k gk
nnoremap Y y$
vnoremap < <gv
vnoremap > >gv
map zl zL
map zh zH
map <silent> <leader>/ :nohlsearch<cr>
cmap cwd lcd %:p:h
cmap cd. lcd %:p:h
cmap w!! w !sudo tee % >/dev/null

runtime ftplugin/man.vim
nnoremap K :<c-u>exe "Man" v:count "<c-r><c-w>"<cr>

autocmd BufRead,BufNewFile *.md setlocal filetype=markdown spell
autocmd VimResized * :wincmd =
autocmd BufWritePre <buffer> call StripTrailingWhitespace()
autocmd BufWinEnter,WinEnter * let w:m2=matchadd('ColorColumn', '\%>79v.\+', -1)
autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif
autocmd FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

function! InitializeDirectories()
  let parent = $HOME
  let prefix = 'vim/'
  let dir_list = {
        \ 'backup': 'backupdir',
        \ 'views': 'viewdir',
        \ 'swap': 'directory' }
  if has('persistent_undo')
    let dir_list['undo'] = 'undodir'
  endif
  let common_dir = parent . '/.' . prefix
  for [dirname, settingname] in items(dir_list)
    let directory = common_dir . dirname . '/'
    if exists("*mkdir")
      if !isdirectory(directory)
        call mkdir(directory)
      endif
    endif
    if !isdirectory(directory)
      echo "Warning: Unable to create backup directory: " . directory
      echo "Try: mkdir -p " . directory
    else
      let directory = substitute(directory, " ", "\\\\ ", "g")
      exec "set " . settingname . "=" . directory
    endif
  endfor
endfunction
call InitializeDirectories()

function! StripTrailingWhitespace()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Let's do this!
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

function! RestoreCursor()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup restoreCursor
  autocmd!
  autocmd BufWinEnter * call RestoreCursor()
augroup END
