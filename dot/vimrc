set nocompatible

if &shell =~# 'fish$'
    set shell=sh
endif

runtime macros/matchit.vim
runtime ftplugin/man.vim

call plug#begin('~/.vim/bundle')
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'
Plug 'kien/ctrlp.vim'
Plug 'scrooloose/syntastic'
Plug 'christoomey/vim-tmux-navigator'
Plug 'plasticboy/vim-markdown'
Plug 'hynek/vim-python-pep8-indent'
Plug 'fatih/vim-go'
Plug 'aliva/vim-fish'
Plug 'travitch/hasksyn'
Plug 'eagletmt/ghcmod-vim'
call plug#end()

filetype plugin indent on
syntax on
scriptencoding utf-8
set background=light

set autoindent
set autoread
set backspace=indent,eol,start whichwrap=b,s,h,l,<,>,[,] nowrap
set clipboard=unnamed
set encoding=utf-8
set nojoinspaces
set hidden
set history=1000
set ignorecase incsearch hlsearch smartcase
set laststatus=2 ruler showcmd
set scrolloff=1
set shortmess+=IfilmnrxoOtT
set expandtab shiftwidth=4 softtabstop=4 tabstop=8
set mouse=a mousehide
set noerrorbells visualbell t_vb=
set winminheight=0
set backup
set completeopt=menu,longest
set wildmenu
set splitright
set shell=bash
if has('persistent_undo')
    set undofile undolevels=1000 undoreload=10000
endif

let mapleader=' '
" Easier horizontal shifting.
map zl zL
map zh zH
" Kill Ex mode.
nnoremap Q <nop>
" Wrapped lines goes down/up to next row, rather than next line in file.
nnoremap j gj
nnoremap k gk
" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$
" Shift without exiting visual mode.
vnoremap < <gv
vnoremap > >gv
" Stop highlighting after a search.
map <silent> <leader>/ :nohlsearch<cr>
" Toggle paste mode.
map <silent> <leader>p :set paste!<cr>
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

" Strip trailing whitespace on save.
autocmd BufWritePre <buffer> call StripTrailingWhitespace()
" Highlight characters beyond 80 columns.
autocmd BufWinEnter,WinEnter <buffer> let w:m2=matchadd('ColorColumn', '\%>80v.\+', -1)
" Modula2, really?
autocmd BufRead,BufNewFile *.md setlocal filetype=markdown spell textwidth=80
" Automatically switch to the current file directory when a new buffer is
" opened.
autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif
" Go style.
autocmd FileType go setlocal ts=8 sw=8 sts=8 tw=80 noet
" Unix style.
autocmd FileType c,cpp,sh,make,zsh,gitconfig
            \ setlocal ts=8 sw=8 sts=8 tw=80 noet cin fo=tcqlron cino=:0,l1,t0,g0,(s,m1,j1,J1

" Setup directories for backup, view and swap files under ~/.vim/.
function! InitializeDirectories()
    let parent = $HOME
    let prefix = 'vim/'
    let dir_list = {
                \ 'backup': 'backupdir',
                \ 'views': 'viewdir',
                \ 'swap': 'directory',
                \ }
    if has('persistent_undo')
        let dir_list['undo'] = 'undodir'
    endif
    let common_dir = parent . '/.' . prefix
    for [dirname, settingname] in items(dir_list)
        let directory = common_dir . dirname . '/'
        if exists("*mkdir")
            if !isdirectory(directory)
                call mkdir(directory)
            endif
        endif
        if !isdirectory(directory)
            echo "Warning: Unable to create backup directory: " . directory
            echo "Try: mkdir -p " . directory
        else
            let directory = substitute(directory, " ", "\\\\ ", "g")
            exec "set " . settingname . "=" . directory
        endif
    endfor
endfunction
call InitializeDirectories()

function! StripTrailingWhitespace()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Let's do this!
    %s/\s\+$//e
    " Cleanup: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

