;; -*- mode: Emacs Lisp -*-

;; Turn off the mouse interface early in startup to avoid momentary display.
(unless (eq system-type 'darwin)
  (when (fboundp 'menu-bar-mode) (menu-bar-mode -1)))
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

;;; Package management
(defvar my-packages
  '(evil evil-surround evil-indent-textobject evil-commentary evil-matchit
         exec-path-from-shell popwin undo-tree diminish magit slime))

(require 'package)
(setq package-user-dir "~/.emacs.d/elpa/")
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)

(require 'cl-lib)

(defun flatten (lst)
  (cond
   ((null lst) nil)
   ((atom lst) (list lst))
   (t (append (flatten (car lst)) (flatten (cdr lst))))))

(defun filter (condp lst)
  (delq nil (mapcar (lambda (x) (and (funcall condp x) x)) lst)))

(defun get-dependencies (pkgs)
  (cl-remove-duplicates
   (flatten
    (cl-loop for pkg in pkgs
             for pkg-vec = (cadr (assq pkg package-alist))
             when pkg-vec
             collect (cons pkg (cl-loop for req in (package-desc-reqs pkg-vec)
                                        for req-name = (car req)
                                        when (memq req-name
                                                   package-activated-list)
                                        collect req-name))))))

(defun get-orphaned-packages (pkgs)
  (let ((pkgs-and-deps (get-dependencies pkgs)))
    (cl-remove-duplicates
     (filter '(lambda (x) (eq nil (memq x pkgs-and-deps)))
             package-activated-list))))

(defun prune-packages (pkgs)
  (let ((orphans (get-orphaned-packages pkgs)))
    (dolist (pkg orphans)
      (package-delete (cadr (assq pkg package-alist)))
      (remq pkg package-alist))))

(defun packages-installed-p ()
  (not (memq 'nil (mapcar (lambda (p) (package-installed-p p)) my-packages))))

(unless (packages-installed-p)
  (package-refresh-contents)
  (dolist (p my-packages)
    (when (not (package-installed-p p))
      (package-install p))))

;; Emacs on OS X doesn't inherit from a shell so we need to set up the path.
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))

;;; Keybindings
(evil-mode t)

(define-prefix-command 'evil-popwin-map)
(define-key evil-motion-state-map (kbd "SPC") 'evil-popwin-map)
(define-key evil-normal-state-map (kbd "SPC") 'evil-popwin-map)
(define-key evil-popwin-map "b" 'popwin:popup-buffer)
(define-key evil-popwin-map "l" 'popwin:popup-last-buffer)
(define-key evil-popwin-map "1" 'popwin:one-window)

;;; Editing
(global-evil-surround-mode t)

(evil-commentary-mode t)
(diminish 'evil-commentary-mode)

;;; Interface
(setq inhibit-startup-screen t
      initial-scratch-message "")

(global-hl-line-mode t)

(setq column-number-mode t)

(blink-cursor-mode -1)

(show-paren-mode t)

;; Smooth scrolling.
(setq scroll-margin 1
      scroll-step 1
      scroll-conservatively 10000
      scroll-preserve-screen-position t)

;; No bells.
(custom-set-variables '(ring-bell-function 'ignore))
(setq visible-bell nil)

;; Reduce prompting.
(fset 'yes-or-no-p 'y-or-n-p)
(setq vc-follow-symlinks t
      kill-buffer-query-functions (remq 'process-kill-buffer-query-function
                                        kill-buffer-query-functions)
      confirm-nonexistent-file-or-buffer nil)
(put 'narrow-to-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'erase-buffer 'disabled nil)
(put 'scroll-left 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

(set-frame-font "Anonymous Pro-24")

(load-theme 'leuven t)

;;; Formatting
(setq-default fill-column 80)

(setq-default sentence-end-double-space nil)

(setq-default indent-tabs-mode nil
              tab-width 4)

;;; Recovery
(setq backup-directory-alist `(("." . ,temporary-file-directory)))

(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
      auto-save-list-file-prefix temporary-file-directory)

;; Persistent undo.
(setq undo-tree-auto-save-history t
      undo-tree-history-directory-alist `(("." . ,temporary-file-directory)))
(diminish 'undo-tree-mode)

;;; Emacs Lisp
(defun imenu-elisp-sections ()
  (setq imenu-prev-index-position-function nil)
  (add-to-list 'imenu-generic-expression '("Sections" "^;;; \\(.+\\)$" 1) t))

(defun jji/emacs-lisp-mode-hook ()
  (eldoc-mode)
  (diminish 'eldoc-mode)
  (imenu-elisp-sections))
(add-hook 'emacs-lisp-mode-hook #'jji/emacs-lisp-mode-hook)

;;; Common Lisp
(require 'slime-autoloads)
(setq inferior-lisp-program "sbcl"
      slime-contribs '(slime-fancy
                       slime-indentation
                       slime-sbcl-exts
                       slime-scratch)
      slime-complete-symbol*-fancy t
      slime-complete-symbol-function 'slime-fuzzy-complete-symbol)
(add-hook 'lisp-mode-hook 'slime-mode)
(eval-after-load 'slime
  (dolist (m `(,slime-mode-map ,slime-repl-mode-map))
    (define-key m [(tab)] 'slime-fuzzy-complete-symbol))
  '(diminish 'slime-mode))
