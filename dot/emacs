;; -*- mode: emacs-lisp -*-

;; Turn off the mouse interface early in start up to avoid momentary display.
(when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

;;; Package management
(defvar my-packages
  '(better-defaults 
    markdown-mode
    ;; Keybindings
    evil
    ;; Editing
    evil-surround
    evil-indent-textobject
    evil-commentary
    paredit
    ;; Navigation
    evil-matchit
    evil-jumper
    ;; Interface
    diminish
    maxframe
    ;; Environment
    exec-path-from-shell
    ;; Version control
    magit
    diff-hl
    ;; Recovery
    undo-tree
    ;; Completion
    ido-ubiquitous
    smex
    flx-ido
    company
    ;; Common lisp
    slime
    slime-company
    ;; Help
    guide-key
    help+
    help-fns+
    ;; Haskell
    haskell-mode))

(require 'package)
(setq package-user-dir "~/.emacs.d/elpa/")
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)

(require 'cl-lib)

(defun flatten (lst)
  (cond ((null lst) nil)
        ((atom lst) (list lst))
        (t (append (flatten (car lst)) (flatten (cdr lst))))))

(defun filter (condp lst)
  (delq nil (mapcar (lambda (x) (and (funcall condp x) x)) lst)))

(defun get-dependencies (pkgs)
  (cl-remove-duplicates
   (flatten
    (cl-loop for pkg in pkgs
             for pkg-vec = (cadr (assq pkg package-alist))
             when pkg-vec
             collect (cons pkg (cl-loop for req in (package-desc-reqs pkg-vec)
                                        for req-name = (car req)
                                        when (memq req-name
                                                   package-activated-list)
                                        collect req-name))))))

(defun get-orphaned-packages (pkgs)
  (let ((pkgs-and-deps (get-dependencies pkgs)))
    (cl-remove-duplicates
     (filter '(lambda (x) (eq nil (memq x pkgs-and-deps)))
             package-activated-list))))

;; TODO: Find out why it errors after deleting a package and running a second
;; time.
(defun prune-packages (pkgs)
  (let ((orphans (get-orphaned-packages pkgs)))
    (dolist (pkg orphans)
      (package-delete (cadr (assq pkg package-alist)))
      (remq pkg package-alist))))

(defun packages-installed-p ()
  (not (memq 'nil (mapcar (lambda (p) (package-installed-p p)) my-packages))))

(unless (packages-installed-p)
  (package-refresh-contents)
  (dolist (p my-packages)
    (when (not (package-installed-p p))
      (package-install p))))

;;; Environment
(when (eq system-type 'darwin)
  (menu-bar-mode t)
  (setq ns-use-native-fullscreen nil)
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier 'super))

;; Emacs on OS X doesn't inherit from a shell so we need to set up the path.
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))

;;; Keybindings
(setq evil-want-C-w-in-emacs-state t
      evil-move-cursor-back nil)
(global-evil-jumper-mode t)
(evil-mode t)

(define-key minibuffer-local-map [escape] 'keyboard-escape-quit)
(define-key minibuffer-local-ns-map [escape] 'keyboard-escape-quit)
(define-key minibuffer-local-completion-map [escape] 'keyboard-escape-quit)
(define-key minibuffer-local-must-match-map [escape] 'keyboard-escape-quit)
(define-key minibuffer-local-isearch-map [escape] 'keyboard-escape-quit)

(evil-define-key 'visual evil-surround-mode-map "s" 'evil-surround-region)

(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)

(global-set-key (kbd "C-x C-r") 'ido-recentf-open-files)

(defvar slime-mode nil)
(defadvice evil-goto-definition (around evil-clever-goto-def activate)
  "Make use of emacs', slime's and etags possibilities for finding definitions."
  (cl-case major-mode
    (lisp-mode (if slime-mode
                   (or (slime-find-definitions (symbol-name (symbol-at-point)))
                       ad-do-it)
                 ad-do-it))
    (emacs-lisp-mode (cond
                      ((functionp (symbol-at-point)) (find-function-at-point))
                      ((/= (variable-at-point) 0) (find-variable-at-point))
                      ((function-called-at-point)
                       (find-function (function-called-at-point)))
                      (t ad-do-it)))
    (otherwise (let ((tag (symbol-name (symbol-at-point))))
                 (cond
                  ((bound-and-true-p 'ggtags-mode) (ggtags-find-tag tag))
                  ((and tags-file-name (find-tag-noselect tag)) (find-tag tag))
                  (t ad-do-it))))))

;;; Help
(require 'help+)
(require 'help-fns+)

(require 'guide-key)
(setq guide-key/guide-key-sequence t
      guide-key/popup-window-position 'bottom
      guide-key/idle-delay 0.4)
(guide-key-mode t)
(diminish 'guide-key-mode)

;;; Editing
(global-evil-surround-mode t)

(evil-commentary-mode t)
(diminish 'evil-commentary-mode)

(eval-after-load 'paredit
  '(diminish 'paredit-mode))

;;; Interface
(setq inhibit-startup-screen t
      initial-scratch-message "")

(global-hl-line-mode t)

(setq column-number-mode t)

;; Remove annoying ellipsis when printing sexp.
(setq eval-expression-print-length nil
      eval-expression-print-level nil)

(blink-cursor-mode -1)

;; Smooth scrolling.
(setq scroll-margin 1
      scroll-step 1
      scroll-conservatively 10000
      scroll-preserve-screen-position t)

;; No bells.
(custom-set-variables '(ring-bell-function 'ignore))
(setq visible-bell nil)

;; Reduce prompting.
(fset 'yes-or-no-p 'y-or-n-p)
(setq vc-follow-symlinks t
      kill-buffer-query-functions (remq 'process-kill-buffer-query-function
                                        kill-buffer-query-functions)
      confirm-nonexistent-file-or-buffer nil)
(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-defun 'disabled nil)
(put 'narrow-to-page 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'erase-buffer 'disabled nil)
(put 'scroll-left 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

(set-frame-font "Anonymous Pro-24")

(global-font-lock-mode -1)

(load-theme 'leuven t)

(setq same-window-buffer-names '("*Help*" "*Apropos*" "*Summary*"))

;;; Recovery
(require 'undo-tree)
(setq undo-tree-auto-save-history t
      undo-tree-history-directory-alist `(("." . ,(concat user-emacs-directory
                                                          "undo"))))
(diminish 'undo-tree-mode)

;;; Formatting
(setq-default fill-column 80)

(setq-default sentence-end-double-space nil)

(setq-default indent-tabs-mode nil
              tab-width 8)

;;; Navigation
(require 'recentf)
(setq recentf-max-menu-items 25)
(recentf-mode t)

(defun ido-recentf-open-files ()
  "Find a recent file using Ido."
  (interactive)
  (let* ((file-assoc-list
          (mapcar (lambda (x) (cons (file-name-nondirectory x) x))
                  recentf-list))
         (filename-list
          (remove-duplicates (mapcar #'car file-assoc-list)
                             :test #'string=))
         (filename
          (ido-completing-read "Choose recent file: " filename-list nil t)))
    (when filename
      (find-file (cdr (assoc filename file-assoc-list))))))

(add-hook 'dired-mode-hook #'font-lock-mode)

;;; Completion

;; Company
(require 'company)
(define-key company-active-map (kbd "\C-n") 'company-select-next)
(define-key company-active-map (kbd "\C-p") 'company-select-previous)
(define-key company-active-map (kbd "\C-d") 'company-show-doc-buffer)
(define-key company-active-map (kbd "<tab>") 'company-complete)
(diminish 'company-mode)

;; Interactive do
(setq ido-use-faces nil
      flx-ido-use-faces t)
(ido-ubiquitous t)
(flx-ido-mode t)

;;; Version control
(setq diff-hl-side 'right)
(global-diff-hl-mode)
(unless (display-graphic-p)
  (setq diff-hl-side 'left)
  (diff-hl-margin-mode))

;;; Emacs Lisp
(defun jji/emacs-lisp-mode-hook ()
  (eldoc-mode)
  (diminish 'eldoc-mode)
  (paredit-mode t)
  (company-mode t))
(add-hook 'emacs-lisp-mode-hook #'jji/emacs-lisp-mode-hook)

;;; Common Lisp
(require 'slime-autoloads)

(setq inferior-lisp-program "sbcl"
      slime-contribs '(slime-fancy
                       slime-indentation
                       slime-sbcl-exts
                       slime-scratch
                       slime-company))

(defun my-lisp-mode-hook ()
  (slime-mode)
  (diminish 'slime-mode)
  (paredit-mode t)
  (company-mode t))
(add-hook 'lisp-mode-hook #'my-lisp-mode-hook)

(defun my-slime-repl-mode-hook ()
  (paredit-mode t)
  (company-mode t))
(add-hook 'slime-repl-mode-hook #'my-slime-repl-mode-hook)

;;; Shell
(defun my-shell-mode-hook ()
  (font-lock-mode t))
(add-hook 'shell-mode-hook #'my-shell-mode-hook)

;;; C
(defun my-c-mode-hook ()
  (c-set-style "linux"))
(add-hook 'c-mode-hook #'my-c-mode-hook)

;;; Haskell
(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
