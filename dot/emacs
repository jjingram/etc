(require 'cl)

(defun system-is-mac ()
  (string-equal system-type "darwin"))

(defun system-is-linux ()
  (string-equal system-type "gnu/linux"))

(defun system-is-mswindows ()
  (string-equal system-type "windows-nt"))

(defun toggle-maximize-buffer ()
  "Maximize buffer"
  (interactive)
  (if (and (= 1 (length (window-list)))
           (assoc'_ register-alist))
      (jump-to-register '_)
    (progn
      (window-configuration-to-register '_)
      (delete-other-windows))))

(defmacro defparameter (symbol &optional initvalue docstring)
  `(progn
     (defvar ,symbol nil ,docstring)
     (setq ,symbol ,initvalue)))

(setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")))
(package-initialize)

(defparameter my-packages
  '(evil undo-tree use-package magit helm solarized-theme diminish company
         exec-path-from-shell haskell-mode ghc company-ghc)
  "A list of packages to ensure are installed at launch.")

(defun flatten (lst)
  (cond
   ((null lst) nil)
   ((atom lst) (list lst))
   (t (append (flatten (car lst)) (flatten (cdr lst))))))

(defun filter (condp lst)
  (delq nil (mapcar (lambda (x)
                      (and (funcall condp x) x))
                    lst)))

(defun get-dependencies (pkgs)
  (remove-duplicates
   (flatten
    (loop for pkg in pkgs
          for pkg-vec = (cadr (assq pkg package-alist))
          when pkg-vec
          collect (cons pkg (loop for req in (package-desc-reqs pkg-vec)
                                  for req-name = (car req)
                                  when (memq req-name package-activated-list)
                                  collect req-name))))))

(defun get-orphaned-packages (pkgs)
  (let ((pkgs-and-deps (get-dependencies pkgs)))
    (remove-duplicates
     (filter '(lambda (x)
                (eq nil (memq x pkgs-and-deps)))
             package-activated-list))))

(defun prune-packages (pkgs)
  (let ((orphans (get-orphaned-packages pkgs)))
    (dolist (pkg orphans)
      (package-delete (cadr (assq pkg package-alist))))))

(defun packages-installed-p ()
  (not (memq 'nil (mapcar (lambda (p) (package-installed-p p)) my-packages))))

(defun packages-sync (packages)
  "Install and prune PACKAGES."
  (unless (packages-installed-p)
    (package-refresh-contents)
    (dolist (p my-packages)
      (when (not (package-installed-p p))
        (package-install p)))))

(packages-sync my-packages)

;; Better defaults.
(progn
  ;; Formatting.
  (setq-default indent-tabs-mode nil
                default-tab-width 4
                default-fill-column 80
                sentence-end-double-space nil)

  (electric-indent-mode 1)

  (show-paren-mode 1)

  (setq delete-by-moving-to-trash t)
  (when (system-is-mac)
    ;; Use `trash' if installed.
    (if (executable-find "trash")
        (defun system-move-file-to-trash (file)
          "Use `trash' to move FILE to the system trash.
Can be installed with `brew install trash'."
          (call-process (executable-find "trash") nil 0 nil file))
      ;; Regular move to trash directory
      (setq trash-directory "~/.Trash/emacs")))

  ;; Make prompts less intrusive.
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq confirm-nonexistent-file-or-buffer nil
        inhibit-startup-message t
        inhibit-startup-echo-area-message t
        vc-follow-symlinks t
        kill-buffer-query-functions (remq 'process-kill-buffery-query-function
                                          kill-buffer-query-functions))

  ;; Show column number in mode line.
  (setq column-number-mode t
        linum-format "%4d")

  ;; Don't beep or blink the screen.
  (custom-set-variables '(ring-bell-function 'ignore))
  (setq visible-bell nil)

  ;; Smooth scrolling.
  (setq scroll-margin 1
        scroll-step 1
        scroll-conservatively 10000
        scroll-preserve-screen-position t
        mouse-wheel-scroll-amount '(1 ((shift) . 1)))

  ;; Seems pointless to warn; there's always undo.
  (put 'narrow-to-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (put 'erase-buffer 'disabled nil)
  (put 'scroll-left 'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)

  ;; Disable GUI elements.
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (window-system)
    (unless (system-is-mac)
      (menu-bar-mode -1))
    (blink-cursor-mode -1))

  ;; Fullscreen mode without animations.
  (setq ns-use-native-fullscreen nil)

  ;; Remove annoying ellipsis when printing sexp in message buffer.
  (setq eval-expression-print-length nil
        eval-expression-print-level nil)

  ;; Put all backups in the same folder.
  (setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                 "backups"))))

  ;; Various tweaks.
  (setq apropos-do-all t
        load-prefer-newer t
        save-interprogram-paste-before-kill t
        require-final-newline t)

  ;(load-theme 'solarized-light t)
  (when (system-is-mac)
    (set-frame-font "Menlo-14")))

(eval-when-compile
  (require 'use-package))
(require 'diminish)
(require 'bind-key)

(use-package saveplace
  :init
  (setq-default save-place t)
  (setq save-place-file (concat user-emacs-directory "places")))

(use-package helm
  :init (require 'helm-config)
  :config (helm-mode 1)
  :diminish helm-mode)

(use-package magit
  :diminish magit-mode)

;; When having windows with repeated filenames, uniquify them by the folder they
;; are in rather those annoying <2>, <3>, ...
(use-package uniquify
  :init
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets
        ;; Don't screw with special buffers.
        uniquify-ignore-buffers-re "^\\*"))

(use-package whitespace
  :init
  (setq whitespace-line-column 80)
  (setq-default whitespace-style '(face indentation empty lines-tail
                                        trailing))
  (add-hook 'before-save-hook 'whitespace-cleanup)
  :diminish whitespace-mode)

(use-package evil
  :config
  ;; Use motion state instead of emacs state by default.
  (setq evil-motion-state-modes (append evil-emacs-state-modes
                                        evil-motion-state-modes)
        evil-emacs-state-modes nil)
  (evil-mode 1))

;; Persistent undo.
(use-package undo-tree
  :init
  (setq undo-tree-history-directory-alist
        `(("." . ,(concat user-emacs-directory "undo/")))
        undo-tree-auto-save-history t)
  :config
  (global-undo-tree-mode 1)
  :diminish undo-tree-mode)

(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :config
  (exec-path-from-shell-initialize))

(use-package ghc
  :init
  ;; Example GHC options.
  ;(setq ghc-ghc-options '("-idir1" "-idir2")
  ;      ghc-hlint-options '("--ignore=Use camelCase"))
  :commands (ghc-init ghc-debug))

(use-package haskell-mode
  :config
  (defun my-haskell-mode-hook ()
    (turn-on-haskell-indentation)
    (company-mode)
    (ghc-init))
  (add-hook 'haskell-mode-hook 'my-haskell-mode-hook))

(use-package company
  :init
  (setq company-idle-delay 0.2
        company-tooltip-limit 10
        company-minimum-prefix-length 2
        company-tooltip-flip-when-above t)
  :config
  (bind-keys :map company-active-map
             ("C-/" . company-search-candidates)
             ("C-d" . company-show-doc-buffer)
             ("C-n" . company-select-next)
             ("C-p" . company-select-previous))
  (add-to-list 'company-backends 'company-ghc)
  :diminish company-mode)

(defun my-prog-mode-hook ()
  (whitespace-mode 1))
(add-hook 'prog-mode-hook 'my-prog-mode-hook)

(defun my-emacs-lisp-mode-hook ()
  (company-mode 1))
(add-hook 'emacs-lisp-mode-hook 'my-emacs-lisp-mode-hook)
